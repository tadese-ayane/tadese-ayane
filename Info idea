
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "CommonMark.dtd">

<document xmlns="http://commonmark.org/xml/1.0">
  <paragraph>
    <text>#</text>
    <text>!</text>
    <text>/usr/bin/env node</text>
    <softbreak />
    <text>/</text>
    <text>*</text>
    <text> eslint no-console:0 </text>
    <text>*</text>
    <text>/</text>
  </paragraph>
  <paragraph>
    <text>import fs from </text>
    <text>'</text>
    <text>node:fs</text>
    <text>'</text>
    <text>;</text>
    <softbreak />
    <text>import argparse from </text>
    <text>'</text>
    <text>argparse</text>
    <text>'</text>
    <text>;</text>
    <softbreak />
    <text>import markdownit from </text>
    <text>'</text>
    <text>../index.mjs</text>
    <text>'</text>
    <text>;</text>
  </paragraph>
  <paragraph>
    <text>// Initialize the argument parser</text>
    <softbreak />
    <text>const cli = new argparse.ArgumentParser({</text>
    <softbreak />
    <text>prog: </text>
    <text>'</text>
    <text>markdown-it</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>add</text>
    <text>_</text>
    <text>help: true</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>// Define CLI arguments</text>
    <softbreak />
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>-v</text>
    <text>'</text>
    <text>, </text>
    <text>'</text>
    <text>--version</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>action: </text>
    <text>'</text>
    <text>version</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>version: JSON.parse(fs.readFileSync(new URL(</text>
    <text>'</text>
    <text>../package.json</text>
    <text>'</text>
    <text>, import.meta.url))).version</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>--no-html</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>Disable embedded HTML</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>action: </text>
    <text>'</text>
    <text>store</text>
    <text>_</text>
    <text>true</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>-l</text>
    <text>'</text>
    <text>, </text>
    <text>'</text>
    <text>--linkify</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>Autolink text</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>action: </text>
    <text>'</text>
    <text>store</text>
    <text>_</text>
    <text>true</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>-t</text>
    <text>'</text>
    <text>, </text>
    <text>'</text>
    <text>--typographer</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>Enable smartquotes and other typographic replacements</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>action: </text>
    <text>'</text>
    <text>store</text>
    <text>_</text>
    <text>true</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>--trace</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>Show stack trace on error</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>action: </text>
    <text>'</text>
    <text>store</text>
    <text>_</text>
    <text>true</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>file</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>File to read</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>nargs: </text>
    <text>'</text>
    <text>?</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>default: </text>
    <text>'</text>
    <text>-</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>cli.add</text>
    <text>_</text>
    <text>argument(</text>
    <text>'</text>
    <text>-o</text>
    <text>'</text>
    <text>, </text>
    <text>'</text>
    <text>--output</text>
    <text>'</text>
    <text>, {</text>
    <softbreak />
    <text>help: </text>
    <text>'</text>
    <text>File to write</text>
    <text>'</text>
    <text>,</text>
    <softbreak />
    <text>default: </text>
    <text>'</text>
    <text>-</text>
    <text>'</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <paragraph>
    <text>// Parse CLI arguments</text>
    <softbreak />
    <text>const options = cli.parse</text>
    <text>_</text>
    <text>args();</text>
  </paragraph>
  <paragraph>
    <text>// Read file function</text>
    <softbreak />
    <text>async function readFile(filename, encoding) {</text>
    <softbreak />
    <text>if (filename === </text>
    <text>'</text>
    <text>-</text>
    <text>'</text>
    <text>) {</text>
    <softbreak />
    <text>// Read from stdin</text>
    <softbreak />
    <text>return new Promise((resolve, reject) =&gt; {</text>
    <softbreak />
    <text>const chunks = </text>
    <text>[</text>
    <text>]</text>
    <text>;</text>
    <softbreak />
    <text>process.stdin.on(</text>
    <text>'</text>
    <text>data</text>
    <text>'</text>
    <text>, (chunk) =&gt; chunks.push(chunk));</text>
    <softbreak />
    <text>process.stdin.on(</text>
    <text>'</text>
    <text>end</text>
    <text>'</text>
    <text>, () =&gt; resolve(Buffer.concat(chunks).toString(encoding)));</text>
    <softbreak />
    <text>process.stdin.on(</text>
    <text>'</text>
    <text>error</text>
    <text>'</text>
    <text>, reject);</text>
    <softbreak />
    <text>});</text>
    <softbreak />
    <text>} else {</text>
    <softbreak />
    <text>return fs.promises.readFile(filename, encoding);</text>
    <softbreak />
    <text>}</text>
    <softbreak />
    <text>}</text>
  </paragraph>
  <paragraph>
    <text>// Main function to process the markdown file</text>
    <softbreak />
    <text>async function processFile() {</text>
    <softbreak />
    <text>try {</text>
    <softbreak />
    <text>const input = await readFile(options.file, </text>
    <text>'</text>
    <text>utf8</text>
    <text>'</text>
    <text>);</text>
    <softbreak />
    <text>const md = markdownit({</text>
    <softbreak />
    <text>html: </text>
    <text>!</text>
    <text>options.no</text>
    <text>_</text>
    <text>html,</text>
    <softbreak />
    <text>xhtmlOut: false,</text>
    <softbreak />
    <text>typographer: options.typographer,</text>
    <softbreak />
    <text>linkify: options.linkify</text>
    <softbreak />
    <text>});</text>
  </paragraph>
  <code_block>const output = md.render(input);

if (options.output === '-') {
  // Write to stdout
  process.stdout.write(output);
} else {
  await fs.promises.writeFile(options.output, output);
}
</code_block>
  <paragraph>
    <text>} catch (err) {</text>
    <softbreak />
    <text>if (err.code === </text>
    <text>'</text>
    <text>ENOENT</text>
    <text>'</text>
    <text>) {</text>
    <softbreak />
    <text>console.error(</text>
    <text>'</text>
    <text>File not found: </text>
    <text>'</text>
    <text> + options.file);</text>
    <softbreak />
    <text>} else {</text>
    <softbreak />
    <text>console.error(</text>
    <softbreak />
    <text>(options.trace </text>
    <text>&amp;</text>
    <text>&amp;</text>
    <text> err.stack) ||</text>
    <softbreak />
    <text>err.message ||</text>
    <softbreak />
    <text>String(err)</text>
    <softbreak />
    <text>);</text>
    <softbreak />
    <text>}</text>
    <softbreak />
    <text>process.exit(1);</text>
    <softbreak />
    <text>}</text>
    <softbreak />
    <text>}</text>
  </paragraph>
  <paragraph>
    <text>// Execute main function</text>
    <softbreak />
    <text>processFile();</text>
  </paragraph
